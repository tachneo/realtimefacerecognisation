import tkinter as tk
from tkinter import simpledialog
from PIL import Image, ImageTk
import cv2
import face_recognition
import os
import sqlite3
import numpy as np

def apply_gray_filter_to_face(image, top, right, bottom, left):
    """Apply a grayscale filter to the face area defined by the top, right, bottom, left coordinates."""
    face_region = image[top:bottom, left:right]
    grayscale_face = cv2.cvtColor(face_region, cv2.COLOR_BGR2GRAY)
    grayscale_face_colored = cv2.cvtColor(grayscale_face, cv2.COLOR_GRAY2BGR)
    image[top:bottom, left:right] = grayscale_face_colored
    return image

class App:
    def __init__(self, window, window_title, video_source=0):
        self.window = window
        self.window.title(window_title)
        self.video_source = video_source

        # Open video source
        self.vid = cv2.VideoCapture(video_source)

        # Create a canvas that can fit the above video source size
        self.canvas = tk.Canvas(window, width=self.vid.get(cv2.CAP_PROP_FRAME_WIDTH), height=self.vid.get(cv2.CAP_PROP_FRAME_HEIGHT))
        self.canvas.pack()

        # Button to quit the application
        self.btn_quit = tk.Button(window, text="Quit", command=self.window.destroy)
        self.btn_quit.pack(side=tk.LEFT)

        # Button to add a new face
        self.btn_add_face = tk.Button(window, text="Add Face", command=self.add_face)
        self.btn_add_face.pack(side=tk.LEFT)

        # Database connection
        self.conn = sqlite3.connect('face_recognition.db')
        self.cursor = self.conn.cursor()
        self.create_table()

        # Load known faces
        self.known_face_encodings, self.known_face_names = self.load_known_faces()

        # Update & display frames in the tkinter window
        self.delay = 15
        self.update()

        self.window.mainloop()

    def update(self):
        ret, frame = self.vid.read()
        if ret:
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            face_locations = face_recognition.face_locations(rgb_frame)
            face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

            for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
                matches = face_recognition.compare_faces(self.known_face_encodings, face_encoding)
                name = "Unknown"

                if True in matches:
                    first_match_index = matches.index(True)
                    name = self.known_face_names[first_match_index]

                # Apply the grayscale filter to the face region
                frame = apply_gray_filter_to_face(frame, top, right, bottom, left)

                # Draw a rectangle around the face and put the name
                cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
                cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)
                font = cv2.FONT_HERSHEY_DUPLEX
                cv2.putText(frame, name, (left + 6, bottom - 6), font, 0.5, (255, 255, 255), 1)

            self.photo = ImageTk.PhotoImage(image=Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)))
            self.canvas.create_image(0, 0, image=self.photo, anchor=tk.NW)

        self.window.after(self.delay, self.update)    

    def create_table(self):
        try:
            # Create table to store face names and image paths
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS faces (
                    id INTEGER PRIMARY KEY,
                    name TEXT NOT NULL,
                    image_path TEXT NOT NULL
                )
            ''')
            self.conn.commit()
            print("Table created successfully.")
        except sqlite3.Error as e:
            print(f"An error occurred when creating the table: {e}")

    def load_known_faces(self):
        known_face_encodings = []
        known_face_names = []
        try:
            # Load faces from the database
            self.cursor.execute('SELECT name, image_path FROM faces')
            faces = self.cursor.fetchall()
            for name, image_path in faces:
                image = face_recognition.load_image_file(image_path)
                face_encoding = face_recognition.face_encodings(image)[0]
                known_face_encodings.append(face_encoding)
                known_face_names.append(name)
        except sqlite3.Error as e:
            print(f"An error occurred when loading faces: {e}")
        return known_face_encodings, known_face_names

    def add_face(self):
        name = simpledialog.askstring("Input", "What is the person's name?", parent=self.window)
        if name:
            ret, frame = self.vid.read()
            if ret:
                rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                face_locations = face_recognition.face_locations(rgb_frame)
                if face_locations:
                    top, right, bottom, left = face_locations[0]
                    face_image = rgb_frame[top:bottom, left:right]
                    pil_image = Image.fromarray(face_image)
                    image_path = f'C:\\Users\\ASUS\\captured_images\\{name}.png'
                    pil_image.save(image_path)
                    self.cursor.execute('INSERT INTO faces (name, image_path) VALUES (?, ?)', (name, image_path))
                    self.conn.commit()
                    self.known_face_encodings, self.known_face_names = self.load_known_faces()

    def update(self):
        ret, frame = self.vid.read()
        if ret:
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            face_locations = face_recognition.face_locations(rgb_frame)
            face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)
            for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
                matches = face_recognition.compare_faces(self.known_face_encodings, face_encoding)
                name = "Unknown"
                if True in matches:
                    first_match_index = matches.index(True)
                    name = self.known_face_names[first_match_index]
                cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
                cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)
                font = cv2.FONT_HERSHEY_DUPLEX
                cv2.putText(frame, name, (left + 6, bottom - 6), font, 0.5, (255, 255, 255), 1)
            self.photo = ImageTk.PhotoImage(image=Image.fromarray(frame))
            self.canvas.create_image(0, 0, image=self.photo, anchor=tk.NW)
        self.window.after(self.delay, self.update)

    def __del__(self):
        if self.vid.isOpened():
            self.vid.release()
        self.conn.close()

root = tk.Tk()
app = App(root, "Tkinter and OpenCV")
